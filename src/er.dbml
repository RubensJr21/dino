// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

Project "Dinô - Update 7" {
  datatype: 'SQLITE'
  Note: 'Projeto desenvolvido para o Trabalho de conclusão de curso.'
}

// TABELA PREENCHIDA PELO SISTEMA
Table tag {
  id integer [pk, increment]
  description text [not null, note: "Educação, Saúde, Lazer, Alimentação, Moradia, Transporte, Serviços, Compras, Impostos/Taxas e Outros"]
}

Table transfer_method {
  id integer [pk, increment]
  nickname text [not null, note: '''
  Para bank_account_transfer_method: "Pix - <bankaccount.nickname>".
  Para credit_card: "<Apelido do cartão de crédito>"
  ''']
  is_disabled boolean [not null, note: "default = false"]
  created_at date [not null, note: "default = date('now','localtime')"]
  updated_at date [not null, note: "default = date('now','localtime')"]
}

Table item_value {
  id integer [pk, increment]
  description text [not null]
  cashflow_type integer [not null, note: "0 = Entrada, 1 = Saída; CHECK(type IN (0,1))"]
  // gasto está agendado para uma data futura específica
  // Ao invés de data seria ideal ter hora e data, mas
  // isso mudaria a forma de como o app funciona
  scheduled_at date [not null]
  amount integer [not null, note: "Guardado em centavos para garantir que o cálculo será feito corretamente"]
  // Indica se a transferência já foi executada.
  // Se um recebimento foi recebido e se um pagamento foi pago
  was_processed boolean [not null, note: '''default = false
  Indica se a transferência já foi executada
  Se um recebimento foi recebido e se um pagamento foi pago''']
  fk_id_transfer_method integer [not null, ref: > transfer_method.id]
  fk_id_tag integer [not null, ref: > tag.id]
  created_at date [not null, note: "default = date('now','localtime')"]
  updated_at date [not null, note: "default = date('now','localtime')"]
}

Table standard_item_value {
  id integer [pk, increment]
  fk_id_item_value integer [not null, ref: - item_value.id]
  created_at date [not null, note: "default = date('now','localtime')"]
  updated_at date [not null, note: "default = date('now','localtime')"]
}

// TABELA PREENCHIDA PELO SISTEMA
Table recurrence_type {
  id integer [pk, increment]
  type text [not null, unique, note: "['Mensalmente', 'Anualmente']"]
}

Table recurring {
  id integer [pk, increment]
  is_disabled boolean [not null, note: "default = false"]
  current_amount integer [not null, note: "Guardado em centavos para garantir que o cálculo será feito corretamente"]
  fk_id_recurrence_type integer [not null, ref: > recurrence_type.id]
  created_at date [not null, note: "default = date('now','localtime')"]
  updated_at date [not null, note: "default = date('now','localtime')"]
}

Table recurring_item_value {
  id integer [pk, increment]
  fk_id_recurring_item_value integer [not null, ref: > recurring.id]
  fk_id_item_value integer [not null, ref: - item_value.id]
}

Table installment {
  id integer [pk, increment]
  installments_number integer [not null]
  total_amount integer [not null, note: "Guardado em centavos para garantir que o cálculo será feito corretamente"]
  created_at date [not null, note: "default = date('now','localtime')"]
  updated_at date [not null, note: "default = date('now','localtime')"]
}

Table installment_item_value {
  id integer [pk, increment]
  fk_id_installment integer [not null, ref: > installment.id]
  fk_id_item_value integer [not null, ref: - item_value.id]
}

Table bank_account {
  id integer [pk, increment]
  nickname text [not null]
  is_disabled boolean [not null, note: "default = false"]
  balance integer [not null, note: "Saldo de uma conta bancária\nGuardado em centavos para garantir que o cálculo será feito corretamente"]
  created_at date [not null, note: "default = date('now','localtime')"]
  updated_at date [not null, note: "default = date('now','localtime')"]
}

// // TABELA PREENCHIDA PELO SISTEMA
// // Para fazer uma melhor conexão dos tipos de métodos de transferência de contas bancárias
// Table bank_account_transfer_method_type {
//   id integer [pk, increment]
//   type text [note: "['Pix', 'Débito', 'Transferência Bancária']"]
// }

Table bank_account_transfer_method {
  id integer [pk, increment]
  method text [not null, note: "['Pix', 'Débito', 'Transferência Bancária']"]
  fk_id_bank_account integer [not null, ref: > bank_account.id]
  // // Para quando a tabela bank_account_transfer_method_type estiver ativada
  // fk_id_method_type integer [not null, ref: > bank_account_transfer_method_type.id]
  fk_id_transfer_method integer [not null, unique, ref: > transfer_method.id]
}

// Table credit_card {
//   id integer [pk, increment]
//   limit integer [not null, note: "Guardado em centavos para garantir que o cálculo será feito corretamente"]
//   last_four_digits varchar(4) [not null]
//   closing_date date [not null, note: "data de fechamento da fatura de um cartão especifico"]
//   due_date date [not null, note: "data de vencimento da fatura de um cartão especifico"]
//   fk_id_transfer_method integer [not null, unique, ref: > transfer_method.id]
// }

// // Funcionalidade para converter fatura em gasto
// //  Inserir valor total no item_value com os atributos
// // statement é extrato em inglês
// Table credit_card_statement {
//   id integer [pk, increment]
//   closing_date date [not null]
//   due_date date [not null]
//   created_at date [default: `now()`, not null]
//   updated_at date [default: `now()`, not null]
//   fk_id_credit_card integer [not null, ref: > credit_card.id]
// }

// // Talvez não seja necessário
// Table credit_card_statement_item {
//   id integer [pk, increment]
//   fk_id_item_value integer [not null, ref: > item_value.id]
//   fk_id_credit_card_statement integer [not null, ref: > credit_card_statement.id]
// }