Passos para criação de nova funcionalidades:

Pastas:
adapters: {
    payment: {},
    receipt: {
        RepositoryReceipt<Tipo_de_implementação_usada>.ts
    }
},
core : {
    // Interfaces mais genéricas
    // Exemplo: Uma interface para definir qual estratégia
    //          de id será usada.
    _shared: {
        model: {
            Base_ItemValue.ts
            IEntityBase.ts // Aqui defino qual estratégia de id usar            
        },
        // Nessa pasta estão as interfaces genéricas de portas
        // TODO: Explicar o que portas são.
        ports: {
            IRepository.ts
        }
        // Interface que define o formato dos casos de uso
        IUseCase.ts
    }
    payment: {
        ports: {},
        use_cases: {}
    },
    receipt: {
        model: {
            // Arquivo que define estrutura do tipo Receipt
            Receipt.ts
        },
        ports: {
            // Interface que especializa a interface genérica de IRepository
            // Adicionando novos métodos e tipos
            IRepositoryReceipt.ts
        }
        use_cases: {
            // Classe responsável por processar os dados e enviar para o repository
            // aqui são feitas as validações transformações para chegar no repository
            // e apenas serem salvas
            // OBS: as resoluções dos objetos em chaves estrangeiras não são de
            //      responsabilidade dessa classe.
            RegisterReceipt.ts
        }
    }
}

adapters {
    [pasta_do_domínio]: {
        {Arquivos que contém as implementações das interfaces/ports}
    }
}
core {
    _shared: {
        [model]: {
            {Arquivos genéricos de representação de dados.}
            {Ex: Base_ItemValue.ts, ou IEntityBase.ts}
        },
        [ports]: {
            {Arquivos genéricos de definição de formas/jeitos de comunicação}
            {Ex: IRepository.ts}
        },
        [use_cases]: {
            {Pode ser uma pasta com os diferentes tipos genéricos de casos de uso, mas normalmente, costuma-se ter apenas um arquivo que define a interface dos casos de uso}
            {Ex: IUseCase.ts}
        }
        [pastas com nomes dos assuntos: exemplo do trabalho "receipt" ou "payment"]: {
            [model]: {
                {Arquivos mais específicos da implementação de modelos de dados relacionado ao escopo da pasta.}
                {Ex: Receipt.ts, Receipt_Recurring.ts e Receipt_Installment.ts}
            },
            [ports]: {
                {Aqui estão localizadas as especificações mais especializadas das portas genéricas.}
                {
                    Exemplo do trabalho:
                        são exemplos de especializações de IRepository.ts
                        * RepositoryReceipt.ts
                        * RepositoryReceipt_Recurring.ts
                        * RepositoryReceipt_Installment.ts    
                }
            },
            [use_cases]: {
                {Arquivos das classes responsáveis por processar, transformar e validar os dados; enviar para o repository específico.}
                {OBS: as resoluções dos objetos em chaves estrangeiras não são de responsabilidade dessas classes}
                {Ex: RegisterReceipt.ts, UpdateReceipt.ts}
            }
        }
    }
}

Passo a passo:
1. Crio arquivo de /core/model.
2. Crio arquivo de /core/ports.
3. Crio os aquivos de /core/use_case para se comunicar com o repository (/core/ports).
4. Implementar as /core/ports em arquivos /adapters